# -*- coding: utf-8 -*-
# Generated by Django 1.11.17 on 2019-01-03 21:17
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicTerms',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False, verbose_name='Term Id')),
                ('canvas_id', models.BigIntegerField(verbose_name='Canvas Id')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('date_start', models.DateField(verbose_name='Start Date')),
                ('date_end', models.DateField(verbose_name='End Date')),
            ],
            options={
                'verbose_name': 'Academic Terms',
                'verbose_name_plural': 'Academic Terms',
                'db_table': 'academic_terms',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='Assignment Id')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('due_date', models.DateTimeField(blank=True, null=True, verbose_name='Due DateTime')),
                ('local_date', models.DateTimeField(blank=True, null=True, verbose_name='Local DateTime')),
                ('points_possible', models.CharField(blank=True, max_length=255, null=True, verbose_name='Points Possible')),
                ('course_id', models.CharField(max_length=255, verbose_name='Course Id')),
                ('assignment_group_id', models.CharField(max_length=255, verbose_name='Assignment Group Id')),
            ],
            options={
                'db_table': 'assignment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AssignmentGroups',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='Assignment Group Id')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('weight', models.CharField(blank=True, max_length=255, null=True, verbose_name='Weight')),
                ('group_points', models.CharField(blank=True, max_length=255, null=True, verbose_name='Group Points')),
                ('course_id', models.CharField(max_length=255, verbose_name='Course Id')),
                ('drop_lowest', models.CharField(blank=True, max_length=255, null=True, verbose_name='Drop Lowest')),
                ('drop_highest', models.CharField(blank=True, max_length=255, null=True, verbose_name='Drop Highest')),
            ],
            options={
                'verbose_name': 'Assignment Groups',
                'verbose_name_plural': 'Assignment Groups',
                'db_table': 'assignment_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AssignmentWeightConsideration',
            fields=[
                ('course_id', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='Course Id')),
                ('consider_weight', models.IntegerField(blank=True, null=True, verbose_name='Consider Weight')),
            ],
            options={
                'db_table': 'assignment_weight_consideration',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.CharField(db_column='id', editable=False, max_length=255, primary_key=True, serialize=False, verbose_name='Unizin Course Id')),
                ('canvas_id', models.CharField(db_column='canvas_id', max_length=255, verbose_name='Canvas Course Id')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Course',
                'db_table': 'course',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='File Id')),
                ('name', models.TextField(verbose_name='File Name')),
                ('course_id', models.CharField(max_length=255, verbose_name='Course Id')),
            ],
            options={
                'db_table': 'file',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='Submission Id')),
                ('assignment_id', models.CharField(max_length=255, verbose_name='Assignment Id')),
                ('course_id', models.CharField(max_length=255, verbose_name='Course Id')),
                ('user_id', models.CharField(max_length=255, verbose_name='User Id')),
                ('score', models.CharField(blank=True, max_length=255, null=True, verbose_name='Score')),
                ('graded_date', models.DateTimeField(blank=True, null=True, verbose_name='Graded DateTime')),
            ],
            options={
                'db_table': 'submission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UnizinMetadata',
            fields=[
                ('pkey', models.CharField(max_length=20, primary_key=True, serialize=False, verbose_name='Key')),
                ('pvalue', models.CharField(blank=True, max_length=100, null=True, verbose_name='Value')),
            ],
            options={
                'db_table': 'unizin_metadata',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='User Id')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('sis_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='SIS Id')),
                ('sis_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='SIS Name')),
                ('course_id', models.CharField(max_length=255, verbose_name='Course Id')),
                ('current_grade', models.CharField(blank=True, max_length=255, null=True, verbose_name='Current Grade')),
                ('final_grade', models.CharField(blank=True, max_length=255, null=True, verbose_name='Final Grade')),
            ],
            options={
                'db_table': 'user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserDefaultSelection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_id', models.CharField(max_length=255)),
                ('user_id', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='CourseViewOption',
            fields=[
                ('course', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dashboard.Course', verbose_name='Course View Option Id')),
                ('show_files_accessed', models.BooleanField(verbose_name='Show Files Accessed View')),
                ('show_assignment_planning', models.BooleanField(verbose_name='Show Assignment Planning View')),
                ('show_grade_distribution', models.BooleanField(verbose_name='Show Grade Distribution View')),
            ],
            options={
                'db_table': 'course_view_option',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FileAccess',
            fields=[
                ('file_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dashboard.File', verbose_name='File')),
                ('user_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, to='dashboard.User', verbose_name='User')),
                ('access_time', models.DateTimeField(verbose_name='Access Time')),
            ],
            options={
                'db_table': 'file_access',
                'managed': False,
            },
        ),
    ]
